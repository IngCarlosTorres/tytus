
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'add alter and between boolean by char character check column coma constraint databases day decimal default diferente1 diferente2 distinct division dospuntos double drop elevado enum exist false foreign group having hour id if igual ilike in inherits insert int interval into isnull key like llavea llavec mas mayor mayor_igual menor menor_igual menos minute mode modulo money month multiplicacion not notnull null or owner para parac parc precision primary ptcoma punto r_bigint r_char r_date r_decimal r_from r_integer r_numeric r_real r_smallint r_time r_timestamp references rename replace second select set show simboloor similar symetric table to true type unique unknown update values varchar varyng where without year zoneinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : OPLOGICA\n                        | SELECT  SELECT : select distinct  LSELECT r_from LFROM WHERE GROUP HAVING\n\t| select  LSELECT r_from LFROM WHERE  GROUP HAVING\n    \n    LSELECT : LEXP\n\t\t| multiplicacion\n    LFROM : LEXP\n\t        |  para SELECT parc\n     WHERE : where EXP\n\t            |  GROUP :  group by EXP\n\t            |  HAVING : having EXP\n\t| ptcoma OPLOGICA :  not RELACIONAL\n                 | OPLOGICA and RELACIONAL\n                 | OPLOGICA or RELACIONALRELACIONAL : RELACIONAL mayor EXP\n                 | RELACIONAL menor EXP\n                 | RELACIONAL mayor_igual EXP\n                 | RELACIONAL menor_igual EXP\n                 | RELACIONAL igual EXP\n                 | RELACIONAL diferente1 EXP\n                 | RELACIONAL diferente2 EXP\n                 | EXPLEXP : LEXP coma EXP\n\t| EXPEXP : EXP mas EXP1\n            | EXP menos EXP1\n            | EXP multiplicacion  EXP1\n            | EXP division EXP1\n            | EXP1EXP1 : EXP1 modulo EXP2\n             | EXP1 elevado EXP2\n             | EXP2EXP2 : para EXP parac\n              | UNARIO EXP\n              | int\n              | decimal\n              | varchar\n              | char\n              | true\n              | false\n              | id\n              | id punto EXP\nUNARIO : mas\n                | menos'
    
_lr_action_items = {'not':([0,2,3,4,5,8,11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,82,84,86,87,],[6,6,-3,-4,-5,-2,-18,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,-19,-20,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,-7,-17,-6,-16,]),'select':([0,2,3,4,5,8,11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,82,84,86,87,],[7,7,-3,-4,-5,-2,-18,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,-19,-20,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,7,-7,-17,-6,-16,]),'$end':([1,2,3,4,5,8,11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,82,84,86,87,],[0,-1,-3,-4,-5,-2,-18,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,-19,-20,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,-7,-17,-6,-16,]),'and':([4,11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[9,-18,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,-19,-20,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'or':([4,11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[10,-18,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,-19,-20,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'para':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[17,17,17,17,-49,-50,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,70,17,70,17,17,17,17,]),'int':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[19,19,19,19,-49,-50,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'decimal':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[20,20,20,20,-49,-50,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'varchar':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[21,21,21,21,-49,-50,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'char':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[22,22,22,22,-49,-50,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'true':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[23,23,23,23,-49,-50,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'false':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[24,24,24,24,-49,-50,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'id':([6,7,9,10,13,15,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[25,25,25,25,-49,-50,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'mas':([6,7,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,74,79,83,85,87,88,],[13,13,13,13,40,-49,-35,-50,-38,13,13,-41,-42,-43,-44,-45,-46,-47,13,40,13,13,13,13,13,13,13,13,13,13,13,13,13,40,40,13,13,13,40,40,40,40,40,40,40,-31,-32,-33,-34,-36,-37,-39,40,13,13,40,13,40,13,13,40,40,]),'menos':([6,7,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,74,79,83,85,87,88,],[15,15,15,15,41,-49,-35,-50,-38,15,15,-41,-42,-43,-44,-45,-46,-47,15,41,15,15,15,15,15,15,15,15,15,15,15,15,15,41,41,15,15,15,41,41,41,41,41,41,41,-31,-32,-33,-34,-36,-37,-39,41,15,15,41,15,41,15,15,41,41,]),'distinct':([7,],[26,]),'multiplicacion':([7,12,14,16,19,20,21,22,23,24,25,26,30,46,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,79,87,88,],[29,42,-35,-38,-41,-42,-43,-44,-45,-46,-47,29,42,42,42,42,42,42,42,42,42,42,-31,-32,-33,-34,-36,-37,-39,42,42,42,42,42,]),'mayor':([11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[33,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,33,33,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'menor':([11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[34,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,34,34,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'mayor_igual':([11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[35,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,35,35,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'menor_igual':([11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[36,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,36,36,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'igual':([11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[37,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,37,37,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'diferente1':([11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[38,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,38,38,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'diferente2':([11,12,14,16,19,20,21,22,23,24,25,31,32,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[39,-28,-35,-38,-41,-42,-43,-44,-45,-46,-47,39,39,-40,-21,-22,-23,-24,-25,-26,-27,-31,-32,-33,-34,-36,-37,-39,-48,]),'division':([12,14,16,19,20,21,22,23,24,25,30,46,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,79,87,88,],[43,-35,-38,-41,-42,-43,-44,-45,-46,-47,43,43,43,43,43,43,43,43,43,43,-31,-32,-33,-34,-36,-37,-39,43,43,43,43,43,]),'coma':([14,16,19,20,21,22,23,24,25,28,30,47,59,60,61,62,63,64,65,66,69,71,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,51,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,51,-29,]),'r_from':([14,16,19,20,21,22,23,24,25,27,28,29,30,47,49,59,60,61,62,63,64,65,66,71,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,50,-8,-9,-30,-40,67,-31,-32,-33,-34,-36,-37,-39,-48,-29,]),'parac':([14,16,19,20,21,22,23,24,25,46,47,59,60,61,62,63,64,65,66,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,65,-40,-31,-32,-33,-34,-36,-37,-39,-48,]),'modulo':([14,16,19,20,21,22,23,24,25,47,59,60,61,62,63,64,65,66,],[44,-38,-41,-42,-43,-44,-45,-46,-47,-40,44,44,44,44,-36,-37,-39,-48,]),'elevado':([14,16,19,20,21,22,23,24,25,47,59,60,61,62,63,64,65,66,],[45,-38,-41,-42,-43,-44,-45,-46,-47,-40,45,45,45,45,-36,-37,-39,-48,]),'where':([14,16,19,20,21,22,23,24,25,30,47,59,60,61,62,63,64,65,66,68,69,71,72,80,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,74,-10,-29,74,-11,]),'group':([14,16,19,20,21,22,23,24,25,30,47,59,60,61,62,63,64,65,66,68,69,71,72,73,76,79,80,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,-13,-10,-29,-13,78,78,-12,-11,]),'having':([14,16,19,20,21,22,23,24,25,30,47,59,60,61,62,63,64,65,66,68,69,71,72,73,76,77,79,80,81,88,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,-13,-10,-29,-13,-15,-15,83,-12,-11,83,-14,]),'ptcoma':([14,16,19,20,21,22,23,24,25,30,47,59,60,61,62,63,64,65,66,68,69,71,72,73,76,77,79,80,81,88,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,-13,-10,-29,-13,-15,-15,84,-12,-11,84,-14,]),'parc':([14,16,19,20,21,22,23,24,25,47,59,60,61,62,63,64,65,66,75,82,84,86,87,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-40,-31,-32,-33,-34,-36,-37,-39,-48,80,-7,-17,-6,-16,]),'punto':([25,],[48,]),'by':([78,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,8,]),'OPLOGICA':([0,2,],[4,4,]),'SELECT':([0,2,70,],[5,5,75,]),'RELACIONAL':([6,9,10,],[11,31,32,]),'EXP':([6,7,9,10,17,18,26,33,34,35,36,37,38,39,48,50,51,67,70,74,83,85,],[12,30,12,12,46,47,30,52,53,54,55,56,57,58,66,30,71,30,46,79,87,88,]),'EXP1':([6,7,9,10,17,18,26,33,34,35,36,37,38,39,40,41,42,43,48,50,51,67,70,74,83,85,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,59,60,61,62,14,14,14,14,14,14,14,14,]),'EXP2':([6,7,9,10,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,63,64,16,16,16,16,16,16,16,16,]),'UNARIO':([6,7,9,10,17,18,26,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,51,67,70,74,83,85,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'LSELECT':([7,26,],[27,49,]),'LEXP':([7,26,50,67,],[28,28,69,69,]),'LFROM':([50,67,],[68,72,]),'WHERE':([68,72,],[73,76,]),'GROUP':([73,76,],[77,81,]),'HAVING':([77,81,],[82,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramatica2.py',213),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','gramatica2.py',218),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','gramatica2.py',224),
  ('instruccion -> OPLOGICA','instruccion',1,'p_instruccion','gramatica2.py',229),
  ('instruccion -> SELECT','instruccion',1,'p_instruccion','gramatica2.py',230),
  ('SELECT -> select distinct LSELECT r_from LFROM WHERE GROUP HAVING','SELECT',8,'p_SELECT','gramatica2.py',235),
  ('SELECT -> select LSELECT r_from LFROM WHERE GROUP HAVING','SELECT',7,'p_SELECT','gramatica2.py',236),
  ('LSELECT -> LEXP','LSELECT',1,'p_LSELECT','gramatica2.py',241),
  ('LSELECT -> multiplicacion','LSELECT',1,'p_LSELECT','gramatica2.py',242),
  ('LFROM -> LEXP','LFROM',1,'p_LFROM','gramatica2.py',245),
  ('LFROM -> para SELECT parc','LFROM',3,'p_LFROM','gramatica2.py',246),
  ('WHERE -> where EXP','WHERE',2,'p_WHERE','gramatica2.py',251),
  ('WHERE -> <empty>','WHERE',0,'p_WHERE','gramatica2.py',252),
  ('GROUP -> group by EXP','GROUP',3,'p_GROUP','gramatica2.py',256),
  ('GROUP -> <empty>','GROUP',0,'p_GROUP','gramatica2.py',257),
  ('HAVING -> having EXP','HAVING',2,'p_HAVING','gramatica2.py',261),
  ('HAVING -> ptcoma','HAVING',1,'p_HAVING','gramatica2.py',262),
  ('OPLOGICA -> not RELACIONAL','OPLOGICA',2,'p_OPLOGICA','gramatica2.py',266),
  ('OPLOGICA -> OPLOGICA and RELACIONAL','OPLOGICA',3,'p_OPLOGICA','gramatica2.py',267),
  ('OPLOGICA -> OPLOGICA or RELACIONAL','OPLOGICA',3,'p_OPLOGICA','gramatica2.py',268),
  ('RELACIONAL -> RELACIONAL mayor EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',272),
  ('RELACIONAL -> RELACIONAL menor EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',273),
  ('RELACIONAL -> RELACIONAL mayor_igual EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',274),
  ('RELACIONAL -> RELACIONAL menor_igual EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',275),
  ('RELACIONAL -> RELACIONAL igual EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',276),
  ('RELACIONAL -> RELACIONAL diferente1 EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',277),
  ('RELACIONAL -> RELACIONAL diferente2 EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',278),
  ('RELACIONAL -> EXP','RELACIONAL',1,'p_RELACIONAL','gramatica2.py',279),
  ('LEXP -> LEXP coma EXP','LEXP',3,'p_LEXP','gramatica2.py',283),
  ('LEXP -> EXP','LEXP',1,'p_LEXP','gramatica2.py',284),
  ('EXP -> EXP mas EXP1','EXP',3,'p_EXP','gramatica2.py',288),
  ('EXP -> EXP menos EXP1','EXP',3,'p_EXP','gramatica2.py',289),
  ('EXP -> EXP multiplicacion EXP1','EXP',3,'p_EXP','gramatica2.py',290),
  ('EXP -> EXP division EXP1','EXP',3,'p_EXP','gramatica2.py',291),
  ('EXP -> EXP1','EXP',1,'p_EXP','gramatica2.py',292),
  ('EXP1 -> EXP1 modulo EXP2','EXP1',3,'p_EXP1','gramatica2.py',296),
  ('EXP1 -> EXP1 elevado EXP2','EXP1',3,'p_EXP1','gramatica2.py',297),
  ('EXP1 -> EXP2','EXP1',1,'p_EXP1','gramatica2.py',298),
  ('EXP2 -> para EXP parac','EXP2',3,'p_EXP2','gramatica2.py',302),
  ('EXP2 -> UNARIO EXP','EXP2',2,'p_EXP2','gramatica2.py',303),
  ('EXP2 -> int','EXP2',1,'p_EXP2','gramatica2.py',304),
  ('EXP2 -> decimal','EXP2',1,'p_EXP2','gramatica2.py',305),
  ('EXP2 -> varchar','EXP2',1,'p_EXP2','gramatica2.py',306),
  ('EXP2 -> char','EXP2',1,'p_EXP2','gramatica2.py',307),
  ('EXP2 -> true','EXP2',1,'p_EXP2','gramatica2.py',308),
  ('EXP2 -> false','EXP2',1,'p_EXP2','gramatica2.py',309),
  ('EXP2 -> id','EXP2',1,'p_EXP2','gramatica2.py',310),
  ('EXP2 -> id punto EXP','EXP2',3,'p_EXP2','gramatica2.py',311),
  ('UNARIO -> mas','UNARIO',1,'p_UNARIO','gramatica2.py',316),
  ('UNARIO -> menos','UNARIO',1,'p_UNARIO','gramatica2.py',317),
]
